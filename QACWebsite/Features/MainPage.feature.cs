// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace QACWebsite.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MainPage")]
    public partial class MainPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "MainPage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "MainPage", "Check the content on the main page", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BackgroundImage")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        [NUnit.Framework.CategoryAttribute("DataSource:ds_qac_website.xlsx")]
        [NUnit.Framework.CategoryAttribute("DataSet:MainPage")]
        [NUnit.Framework.TestCaseAttribute("https://qaconsultants.com/wp-content/uploads/2022/06/background-2-scaled.jpg", null)]
        public void BackgroundImage(string url, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Regression",
                    "DataSource:ds_qac_website.xlsx",
                    "DataSet:MainPage"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("url", url);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BackgroundImage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("the website wrapper element exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("the background image block exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then(string.Format("the background image {0} exists", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BigText")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        public void BigText()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BigText", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
 testRunner.Given("the website wrapper element exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
 testRunner.When("the background image block exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then("the big text is North America’s Largest Independent Software Quality Engineering " +
                        "Services Firm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MenuItem")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        [NUnit.Framework.CategoryAttribute("DataSource:ds_qac_website.xlsx")]
        [NUnit.Framework.CategoryAttribute("DataSet:Menu")]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Test Automation,Performance Engineering and Testing,System Integration Testing Se" +
            "rvice,Security Testing,Functional Testing Services,Data Validation,Mobile Testin" +
            "g Service,Audit & Advisory Services,Emerging Technologies,On Demand Testing™,Acc" +
            "essibility", null)]
        [NUnit.Framework.TestCaseAttribute("Industries", "Automotive,Digital Media,Banking and Financial,Construction and Industrial,Media " +
            "and Entertainment,Government,Healthcare,Insurance,Retail Software Testing,Teleco" +
            "mmunications,Energy and Utilities,Hospitality & Tourism", null)]
        [NUnit.Framework.TestCaseAttribute("Client Success", "Our Clients,Case Studies", null)]
        [NUnit.Framework.TestCaseAttribute("Ideas + Insights", "Blog,White Papers,Test Talk,Webinars", null)]
        [NUnit.Framework.TestCaseAttribute("About", "About us,News,Leadership Team,Partners", null)]
        [NUnit.Framework.TestCaseAttribute("Careers", "Working at QA Consultants,Current Opportunities", null)]
        [NUnit.Framework.TestCaseAttribute("Contact", "Contact us,Media", null)]
        public void MenuItem(string item, string subitem, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Regression",
                    "DataSource:ds_qac_website.xlsx",
                    "DataSet:Menu"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("item", item);
            argumentsOfScenario.Add("subitem", subitem);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MenuItem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given("the mega menu wrapper exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.When(string.Format("the {0} mega menu item exists", item), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then(string.Format("the {0} sub menu item exists", subitem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MenuNavigation")]
        [NUnit.Framework.CategoryAttribute("Navigation")]
        [NUnit.Framework.CategoryAttribute("DataSource:ds_qac_website.xlsx")]
        [NUnit.Framework.CategoryAttribute("DataSet:MenuNavigation")]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Test Automation", "Test Automation", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Performance Engineering and Testing", "Performance Engineering and Testing", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "System Integration Testing Service", "System Integration Testing Service", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Security Testing", "Cybersecurity Testing", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Functional Testing Services", "Functional Testing Services", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Data Validation", "Data Validation", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Mobile Testing Service", "Mobile Testing Service", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Audit & Advisory Services", "Audit & Advisory Services", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "Emerging Technologies", "Emerging Technologies", null)]
        [NUnit.Framework.TestCaseAttribute("Solutions + Services", "On Demand Testing™", "On Demand Testing™", null)]
        public void MenuNavigation(string item, string subitem, string title, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Navigation",
                    "DataSource:ds_qac_website.xlsx",
                    "DataSet:MenuNavigation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("item", item);
            argumentsOfScenario.Add("subitem", subitem);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MenuNavigation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given("the mega menu wrapper exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.When(string.Format("the user mouse hover {0} and click on {1} Sub Menu option", item, subitem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then(string.Format("Check if {0} breadcrumbs exists", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.And(string.Format("Check if {0} title page exists", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("SearchContent")]
        [NUnit.Framework.CategoryAttribute("Search")]
        public void SearchContent()
        {
            string[] tagsOfScenario = new string[] {
                    "Search"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SearchContent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("the user clicks on search icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.And("type automation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.When("click enter keyboard key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("Check the search result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
